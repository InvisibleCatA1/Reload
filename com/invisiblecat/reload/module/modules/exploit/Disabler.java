package com.invisiblecat.reload.module.modules.exploit;

import com.invisiblecat.reload.Reload;
import com.invisiblecat.reload.event.EventTarget;
import com.invisiblecat.reload.event.events.*;
import com.invisiblecat.reload.module.Category;
import com.invisiblecat.reload.module.Module;
import com.invisiblecat.reload.setting.settings.ModeSetting;
import com.invisiblecat.reload.setting.settings.NumberSetting;
import com.invisiblecat.reload.utils.NumberUtils;
import com.invisiblecat.reload.utils.PacketUtils;
import com.invisiblecat.reload.utils.TimerUtils;
import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S2EPacketCloseWindow;
import net.minecraft.network.play.server.S31PacketWindowProperty;
import net.minecraft.util.Vec3;

import java.util.ArrayList;
import java.util.Queue;
import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedDeque;

public class Disabler extends Module {

    private final TimerUtils lagDelay = new TimerUtils();
    private final Queue<Packet<?>> packets = new ConcurrentLinkedDeque<>();
    private boolean tped;

    private int count = 0;
    private int count1 = 0;

    private final ModeSetting mode = new ModeSetting("Mode", "Blocks MC", "Blocks MC", "Mineplex Combat", "Blocks MC Movement");


    public Disabler() {
        super("Disabler", 0, Category.EXPLOIT, AutoDisable.NONE);
        this.addSettings(mode);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        packets.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate event) {
        this.setDisplayName("Disabler " + ChatFormatting.GRAY + mode.getSelected());
    }

    @EventTarget
    public void onPacket(EventSendPacket event) {
        Packet packet = event.getPacket();

        switch (mode.getSelected().toLowerCase().replaceAll("\\s", "")) {
            case "blocksmccombat":
                if (packet instanceof C0FPacketConfirmTransaction) {
                    if (mc.thePlayer.isDead) {
                        count = 0;
                    }
                    if (count != 0) event.setCancelled(true);
                    count++;
                } else if (packet instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                } else if (packet instanceof C00PacketKeepAlive) {
                    ((C00PacketKeepAlive) packet).setKey(((C00PacketKeepAlive) packet).getKey() - ((C00PacketKeepAlive) packet).getKey() / 2);

                }
            case "blocksmc":
                if (packet instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction action = (C0BPacketEntityAction) packet;
                    if (action.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                        if (EntityPlayerSP.serverSprintState) {
                            PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            EntityPlayerSP.serverSprintState = false;
                        }
                        event.setCancelled(true);
                    }
                    if (action.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                        event.setCancelled(true);
                    }
                }

                if (packet instanceof C00PacketKeepAlive || packet instanceof C0FPacketConfirmTransaction) {
                    packets.add(packet);
                    event.setCancelled(true);

                    if (packets.size() > 300) {
                        PacketUtils.sendPacketNoEvent(packets.poll());
                    }
                }
                if (packet instanceof C03PacketPlayer) {
                    C03PacketPlayer c03 = (C03PacketPlayer) packet;

                    if (mc.thePlayer.ticksExisted % 20 == 0) {
                        PacketUtils.sendPacketNoEvent(new C18PacketSpectate(UUID.randomUUID()));
                        PacketUtils.sendPacketNoEvent(new C0CPacketInput(0.98F, 0.98F, false, false));
                    }

                    if (mc.thePlayer.ticksExisted % 120 == 0) {
                        c03.setOnGround(false);
                        c03.setY(-0.015625);
                        tped = true;
                        PacketUtils.sendPacketNoEvent(packets.poll());
                    }
                }

        }

    }

    @EventTarget
    public void onPreMotion(EventPreMotionUpdate event) {
        if (mc.isIntegratedServerRunning()) return;

        if (mode.getSelected().toLowerCase().replaceAll("\\s", "").equals("blocksmc")) {
            if (lagDelay.hasTimePassed(490L, false)) {
                lagDelay.reset();

                if(!packets.isEmpty()) {
                    PacketUtils.sendPacketNoEvent(packets.poll());
                }
            }
        }
    }
}

