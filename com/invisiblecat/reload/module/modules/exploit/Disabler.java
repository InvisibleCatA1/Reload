package com.invisiblecat.reload.module.modules.exploit;

import com.invisiblecat.reload.client.ui.hud.notification.Notification;
import com.invisiblecat.reload.client.ui.hud.notification.NotificationManager;
import com.invisiblecat.reload.client.ui.hud.notification.NotificationType;
import com.invisiblecat.reload.event.EventTarget;
import com.invisiblecat.reload.event.events.EventPreMotionUpdate;
import com.invisiblecat.reload.event.events.EventRecivePacket;
import com.invisiblecat.reload.event.events.EventSendPacket;
import com.invisiblecat.reload.event.events.EventUpdate;
import com.invisiblecat.reload.module.Category;
import com.invisiblecat.reload.module.Module;
import com.invisiblecat.reload.setting.settings.ModeSetting;
import com.invisiblecat.reload.utils.PacketUtils;
import com.invisiblecat.reload.utils.TimerUtils;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.Queue;
import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedDeque;

public class Disabler extends Module {

    private final TimerUtils lagDelay = new TimerUtils();
    private final TimerUtils timer = new TimerUtils();
    private final Queue<Packet<?>> packets = new ConcurrentLinkedDeque<>();

    private final ModeSetting mode = new ModeSetting("Mode", "Blocks MC Old", "Blocks MC Old", "Verus");


    public Disabler() {
        super("Disabler", 0, Category.EXPLOIT, AutoDisable.NONE);
        this.addSettings(mode);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        packets.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate event) {
        this.setDisplayName(mode.getSelected());
    }

    @EventTarget
    public void onRecivePacket(EventRecivePacket event) {
        Packet<?> packet = event.getPacket();

        switch (mode.getSelected().toLowerCase().replaceAll("\\s", "")) {
            case "blocksmc":
                if (packet instanceof S08PacketPlayerPosLook && lagDelay.hasTimePassed(1000, true)) {
                    final S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook) packet;
                    if (mc.thePlayer.getDistanceSq(s08.getX(), s08.getY(), s08.getZ()) <= 9.5) {
                        PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), false));
                        event.setCancelled(true);
                    }
                }
        }
    }

    @EventTarget
    public void onSendPacket(EventSendPacket event) {
        Packet<?> packet = event.getPacket();

        switch (mode.getSelected().toLowerCase().replaceAll("\\s", "")) {
            case "blocksmc": {
                if (packet instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction action = (C0BPacketEntityAction) packet;
                    if (action.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
                        if (EntityPlayerSP.serverSprintState) {
                            PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            EntityPlayerSP.serverSprintState = false;
                        }
                        event.setCancelled(true);
                    }
                    if (action.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                        event.setCancelled(true);
                    }
                }


                if (packet instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                    packets.add(packet);

                    if (packets.size() > 300) {
                        PacketUtils.sendPacketNoEvent(packets.poll());
                    }
                }
                if (packet instanceof C00PacketKeepAlive && lagDelay.hasTimePassed(1000, false)) {
                    C00PacketKeepAlive keepAlive = (C00PacketKeepAlive) packet;
                    keepAlive.setKey((int) (keepAlive.getKey() * Math.random()));
                }
                if (packet instanceof C03PacketPlayer) {
                    final C03PacketPlayer c03 = (C03PacketPlayer) packet;


                    if (mc.thePlayer.ticksExisted % 20 == 0) {
                        PacketUtils.sendPacketNoEvent(new C18PacketSpectate(UUID.randomUUID()));
                        PacketUtils.sendPacketNoEvent(new C0CPacketInput(0.98F, 0.98F, false, false));
                    }

                    if (mc.thePlayer.ticksExisted % 320 == 0) {
                        c03.setOnGround(false);
                    }
                }
            } case "verus": {
                if (packet instanceof C0FPacketConfirmTransaction) {
                    packets.add(packet);
                    event.setCancelled(true);
                }
                if (packet instanceof C00PacketKeepAlive && lagDelay.hasTimePassed(45000, true))  {
                    packets.add(packet);
                    event.setCancelled(true);
                }
                if (packet instanceof C03PacketPlayer) {
                    C03PacketPlayer c03 = (C03PacketPlayer) packet;

                    if (mc.thePlayer.ticksExisted % 120 == 0) {
                        c03.setMoving(true);
                        c03.setOnGround(false);
                    }

                    PacketUtils.sendPacketNoEvent(new C0CPacketInput(0.000000000000000000001F, 0.000000000000000000001F, mc.thePlayer.isSneaking(), false));
                }

                if (packet instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction c0b = (C0BPacketEntityAction) packet;

                    event.setCancelled(true);
                    if (timer.hasTimePassed(120, true)) {
                        packets.add(new C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak));
                    }

                }


                if(packet instanceof C03PacketPlayer) {
                    PacketUtils.sendPacket(new C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak));
                }

                if (timer.hasTimePassed(2000, true)) {
                    PacketUtils.sendPacketNoEvent(new C18PacketSpectate(UUID.randomUUID()));
                    if (mc.thePlayer.onGround) {
                        PacketUtils.sendPacketNoEvent(new C03PacketPlayer(false));
                    }
                }

                if (packets.size() > 250) {
                    PacketUtils.sendPacketNoEvent(packets.poll());
                }

            }
        }

    }

    @EventTarget
    public void onPreMotion(EventPreMotionUpdate event) {
        if (mc.isIntegratedServerRunning()) return;

        if (mode.getSelected().toLowerCase().replaceAll("\\s", "").equals("blocksmc")) {
            C13PacketPlayerAbilities abilities = new C13PacketPlayerAbilities();
            if (lagDelay.hasTimePassed(490L, true)) {

                if(!packets.isEmpty()) {
                    PacketUtils.sendPacketNoEvent(packets.poll());
                }
            }

            abilities.setAllowFlying(true);
            abilities.setFlying(true);


            PacketUtils.sendPacketNoEvent(abilities);
        } else if (mode.getSelected().equals("Vesus")) {
            if (packets.size() > 250) {
                PacketUtils.sendPacketNoEvent(packets.poll());
            }

            if (!mc.thePlayer.onGround && lagDelay.hasTimePassed(20, true)) {
                event.setGround(mc.thePlayer.ticksExisted % 20 == 0);
            }
        }
    }
}

