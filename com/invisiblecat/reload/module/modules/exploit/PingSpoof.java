package com.invisiblecat.reload.module.modules.exploit;

import com.invisiblecat.reload.event.EventTarget;
import com.invisiblecat.reload.event.events.EventJoinWorld;
import com.invisiblecat.reload.event.events.EventPreMotionUpdate;
import com.invisiblecat.reload.event.events.EventSendPacket;
import com.invisiblecat.reload.event.events.EventUpdate;
import com.invisiblecat.reload.module.Category;
import com.invisiblecat.reload.module.Module;
import com.invisiblecat.reload.setting.settings.NumberSetting;
import com.invisiblecat.reload.utils.PacketUtils;
import com.invisiblecat.reload.utils.TimerUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S3FPacketCustomPayload;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class PingSpoof extends Module {
    private NumberSetting delay = new NumberSetting("Delay", 1000, 1000, 10000, 1);

    private final ConcurrentHashMap<Packet<?>, Long> packets = new ConcurrentHashMap<>();

    private TimerUtils timer = new TimerUtils();

    public PingSpoof() {
        super("PingSpoof", 0, Category.EXPLOIT, AutoDisable.NONE);
        this.addSettings(delay);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        packets.clear();
    }

    @EventTarget
    public void onWorldChange(EventJoinWorld event) {
        if (mc.isSingleplayer()) return;

        packets.clear();
    }

    @EventTarget
    public void onUpdate(EventUpdate event) {
        this.setDisplayName(delay.getValueInt() + "ms");
    }

    @EventTarget
    public void onPreMotionUpdate(EventPreMotionUpdate event) {
        if (mc.isSingleplayer()) return;

        for (Iterator<Map.Entry<Packet<?>, Long>> i = packets.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry<Packet<?>, Long> entry = i.next();

            if (entry.getValue() < System.currentTimeMillis()) {
                PacketUtils.sendPacket(entry.getKey());
                i.remove();
            }
        }
    }

    @EventTarget
    public void onPacketSend(EventSendPacket event) {
        if (mc.isSingleplayer())
            return;

        final Packet<?> p = event.getPacket();

        if (p instanceof C0FPacketConfirmTransaction || p instanceof C00PacketKeepAlive) {
            packets.put(p, (long) (System.currentTimeMillis() + delay.getValue()));
            event.setCancelled(true);
        }
    }


}
